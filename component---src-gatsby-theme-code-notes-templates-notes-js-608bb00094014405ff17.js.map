{"version":3,"sources":["webpack:///./src/gatsby-theme-code-notes/components/NoteList/NoteList.tsx","webpack:///./node_modules/gatsby-theme-code-notes/src/components/NotesPage/NotesPage.tsx","webpack:///./src/gatsby-theme-code-notes/templates/Notes.js"],"names":["NoteList","_ref","notes","React","createElement","Fragment","sort","one","two","node","frontmatter","title","localeCompare","date","map","_ref2","tags","emoji","name","parent","dateModified","fields","NoteListItem","key","NotesPage","data","pageContext","location","allMdx","edges","useSiteMetadata","siteTitle","jsx","Layout","activeTag","tag","path","pathname","basePath","hasUntagged","Heading","as","variant","TagDot","size"],"mappings":"4LAOO,MAAMA,EAA6CC,IAAe,IAAd,MAAEC,GAAOD,EAClE,OACEE,IAAAC,cAACC,WAAQ,KACNH,EACEI,KAAK,CAACC,EAAKC,IACVD,EAAIE,KAAKC,YAAYC,MAAMC,cAAcJ,EAAIC,KAAKC,YAAYG,OAE/DC,IAAIC,IAAc,IAAb,KAAEN,GAAMM,EACZ,MAAM,MAAEJ,EAAK,KAAEK,EAAI,MAAEC,EAAK,KAAEJ,GAASJ,EAAKC,aACpC,KAAEQ,GAAST,EAAKU,QAChB,aAAEC,GAAiBX,EAAKY,OAC9B,OACElB,IAAAC,cAACkB,IAAY,CACXX,MAAOA,EACPM,MAAOA,EACPD,KAAMA,EACNE,KAAMA,EACNE,aAAcA,EACdP,KAAMA,EACNU,IAAKL,Q,wCClBZ,MAAMM,EAAYvB,IAAqC,IAApC,KAAEwB,EAAI,YAAEC,EAAW,SAAEC,GAAU1B,EACvD,MAAMC,EAAQuB,EAAKG,OAAOC,OACpB,MAAElB,GAAUmB,cACZC,EAAYpB,EAClB,OACEqB,YAACC,IAAM,CACLC,UAAWR,EAAYS,IACvBC,KAAMT,EAASU,SACfC,SAAUZ,EAAYY,SACtBC,YAAab,EAAYa,YACzB5B,MAAOe,EAAYS,IAAM,QAAQT,EAAYS,IAAQJ,GAEpDL,EAAYS,KACXH,YAACQ,IAAO,CAACC,GAAG,KAAKC,QAAQ,aACF,aAApBhB,EAAYS,IACXH,YAAC3B,WAAQ,KACP2B,YAACW,IAAM,CAACR,IAAKT,EAAYS,IAAKS,KAAK,UAAU,IAAElB,EAAYS,KAG7DH,YAAC3B,WAAQ,KAAC,mBAIhB2B,YAAChC,EAAQ,CAACE,MAAOA,O,kCC9BvB,uBAEesB,YAAS","file":"component---src-gatsby-theme-code-notes-templates-notes-js-608bb00094014405ff17.js","sourcesContent":["import React, { FunctionComponent, Fragment } from \"react\"\nimport { NoteListItem } from \"gatsby-theme-code-notes/src/components/NoteListItem\"\n\ninterface NoteListProps {\n  notes: any[]\n}\n\nexport const NoteList: FunctionComponent<NoteListProps> = ({ notes }) => {\n  return (\n    <Fragment>\n      {notes\n        .sort((one, two) =>\n          one.node.frontmatter.title.localeCompare(two.node.frontmatter.date)\n        )\n        .map(({ node }) => {\n          const { title, tags, emoji, date } = node.frontmatter\n          const { name } = node.parent\n          const { dateModified } = node.fields\n          return (\n            <NoteListItem\n              title={title}\n              emoji={emoji}\n              tags={tags}\n              name={name}\n              dateModified={dateModified}\n              date={date}\n              key={name}\n            />\n          )\n        })}\n    </Fragment>\n  )\n}\n","/** @jsx jsx */\nimport { jsx, Heading } from 'theme-ui'\nimport { Fragment } from 'react'\nimport { NoteList } from '../NoteList'\nimport { Layout } from '../Layout'\nimport { useSiteMetadata } from '../../use-site-metadata'\nimport { TagDot } from '../TagDot'\n\nexport const NotesPage = ({ data, pageContext, location }) => {\n  const notes = data.allMdx.edges\n  const { title } = useSiteMetadata()\n  const siteTitle = title\n  return (\n    <Layout\n      activeTag={pageContext.tag}\n      path={location.pathname}\n      basePath={pageContext.basePath}\n      hasUntagged={pageContext.hasUntagged}\n      title={pageContext.tag ? `Tag: ${pageContext.tag}` : siteTitle}\n    >\n      {pageContext.tag && (\n        <Heading as=\"h1\" variant=\"noteTitle\">\n          {pageContext.tag !== 'untagged' ? (\n            <Fragment>\n              <TagDot tag={pageContext.tag} size=\"0.5em\" /> {pageContext.tag}\n            </Fragment>\n          ) : (\n            <Fragment>Untagged Notes</Fragment>\n          )}\n        </Heading>\n      )}\n      <NoteList notes={notes} />\n    </Layout>\n  )\n}\n","import { graphql } from \"gatsby\"\nimport { NotesPage } from \"gatsby-theme-code-notes/src/components/NotesPage\"\n\nexport default NotesPage\n\nexport const pageQuery = graphql`\n  fragment AllPages2 on Mdx {\n    id\n    frontmatter {\n      title\n      tags\n      emoji\n      date\n    }\n    fields {\n      dateModified(formatString: \"Do MMM YYYY\")\n    }\n    parent {\n      ... on File {\n        name\n      }\n    }\n  }\n\n  query {\n    allMdx(sort: { fields: frontmatter___date, order: DESC }) {\n      edges {\n        node {\n          ...AllPages2\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}