{"version":3,"sources":["webpack:///./src/gatsby-theme-code-notes/components/NoteList/NoteList.tsx","webpack:///./node_modules/gatsby-theme-code-notes/src/components/NotesPage/NotesPage.tsx","webpack:///./src/gatsby-theme-code-notes/templates/Notes.js"],"names":["NoteList","notes","sort","one","two","node","frontmatter","title","localeCompare","date","map","tags","emoji","name","parent","dateModified","fields","NoteListItem","key","NotesPage","data","pageContext","location","allMdx","edges","siteTitle","useSiteMetadata","Layout","activeTag","tag","path","pathname","basePath","hasUntagged","as","variant","TagDot","size","pageQuery"],"mappings":"kNAOaA,EAA6C,SAAC,GAAc,IAAZC,EAAY,EAAZA,MAC3D,OACE,kBAAC,WAAD,KACGA,EACEC,MAAK,SAACC,EAAKC,GAAN,OACJD,EAAIE,KAAKC,YAAYC,MAAMC,cAAcJ,EAAIC,KAAKC,YAAYG,SAE/DC,KAAI,YAAc,IAAXL,EAAW,EAAXA,KAAW,EACoBA,EAAKC,YAAlCC,EADS,EACTA,MAAOI,EADE,EACFA,KAAMC,EADJ,EACIA,MAAOH,EADX,EACWA,KACpBI,EAASR,EAAKS,OAAdD,KACAE,EAAiBV,EAAKW,OAAtBD,aACR,OACE,kBAACE,EAAA,EAAD,CACEV,MAAOA,EACPK,MAAOA,EACPD,KAAMA,EACNE,KAAMA,EACNE,aAAcA,EACdN,KAAMA,EACNS,IAAKL,S,oCClBNM,EAAY,SAAC,GAAoC,IAAlCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCrB,EAAQmB,EAAKG,OAAOC,MAEpBC,EADYC,cAAVnB,MAER,OACE,YAACoB,EAAA,EAAD,CACEC,UAAWP,EAAYQ,IACvBC,KAAMR,EAASS,SACfC,SAAUX,EAAYW,SACtBC,YAAaZ,EAAYY,YACzB1B,MAAOc,EAAYQ,IAAZ,QAA0BR,EAAYQ,IAAQJ,GAEpDJ,EAAYQ,KACX,YAAC,IAAD,CAASK,GAAG,KAAKC,QAAQ,aACF,aAApBd,EAAYQ,IACX,YAAC,WAAD,KACE,YAACO,EAAA,EAAD,CAAQP,IAAKR,EAAYQ,IAAKQ,KAAK,UADrC,IACiDhB,EAAYQ,KAG7D,YAAC,WAAD,wBAIN,YAAC,EAAD,CAAU5B,MAAOA,O,kCC9BvB,iEAEekB,YAAf,EAEO,IAAMmB,EAAS","file":"component---src-gatsby-theme-code-notes-templates-notes-js-264ca80d8e4d70800385.js","sourcesContent":["import React, { FunctionComponent, Fragment } from \"react\"\nimport { NoteListItem } from \"gatsby-theme-code-notes/src/components/NoteListItem\"\n\ninterface NoteListProps {\n  notes: any[]\n}\n\nexport const NoteList: FunctionComponent<NoteListProps> = ({ notes }) => {\n  return (\n    <Fragment>\n      {notes\n        .sort((one, two) =>\n          one.node.frontmatter.title.localeCompare(two.node.frontmatter.date)\n        )\n        .map(({ node }) => {\n          const { title, tags, emoji, date } = node.frontmatter\n          const { name } = node.parent\n          const { dateModified } = node.fields\n          return (\n            <NoteListItem\n              title={title}\n              emoji={emoji}\n              tags={tags}\n              name={name}\n              dateModified={dateModified}\n              date={date}\n              key={name}\n            />\n          )\n        })}\n    </Fragment>\n  )\n}\n","/** @jsx jsx */\nimport { jsx, Heading } from 'theme-ui'\nimport { Fragment } from 'react'\nimport { NoteList } from '../NoteList'\nimport { Layout } from '../Layout'\nimport { useSiteMetadata } from '../../use-site-metadata'\nimport { TagDot } from '../TagDot'\n\nexport const NotesPage = ({ data, pageContext, location }) => {\n  const notes = data.allMdx.edges\n  const { title } = useSiteMetadata()\n  const siteTitle = title\n  return (\n    <Layout\n      activeTag={pageContext.tag}\n      path={location.pathname}\n      basePath={pageContext.basePath}\n      hasUntagged={pageContext.hasUntagged}\n      title={pageContext.tag ? `Tag: ${pageContext.tag}` : siteTitle}\n    >\n      {pageContext.tag && (\n        <Heading as=\"h1\" variant=\"noteTitle\">\n          {pageContext.tag !== 'untagged' ? (\n            <Fragment>\n              <TagDot tag={pageContext.tag} size=\"0.5em\" /> {pageContext.tag}\n            </Fragment>\n          ) : (\n            <Fragment>Untagged Notes</Fragment>\n          )}\n        </Heading>\n      )}\n      <NoteList notes={notes} />\n    </Layout>\n  )\n}\n","import { graphql } from \"gatsby\"\nimport { NotesPage } from \"gatsby-theme-code-notes/src/components/NotesPage\"\n\nexport default NotesPage\n\nexport const pageQuery = graphql`\n  fragment AllPages2 on Mdx {\n    id\n    frontmatter {\n      title\n      tags\n      emoji\n      date\n    }\n    fields {\n      dateModified(formatString: \"Do MMM YYYY\")\n    }\n    parent {\n      ... on File {\n        name\n      }\n    }\n  }\n\n  query {\n    allMdx(sort: { fields: frontmatter___date, order: DESC }) {\n      edges {\n        node {\n          ...AllPages2\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}